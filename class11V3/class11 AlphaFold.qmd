---
title: "class 11: AlphaFold"
author: "Aigerim (PID: 09919142)"
format: pdf
---

AlphaFold is a new bioinformatics method for structure prediction of sequence.

We can run AlphaFold in our computer by installing it or we can run in GoogleColab (without needing to install anything) via: https://github.com/sokrypton/ColabFold

```{r}
pth <- "hiv1_dimer_23119/"
```


```{r}
pdb_files <- list.files(path=pth,
                        pattern="*.pdb",
                        full.names = TRUE)


basename(pdb_files)
```

```{r}
library(bio3d)
```

```{r}
pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
```

A quick view of model sequences - this should be a boring alignment in the sense that all sequences are the same.

```{r}
pdbs
```


RMSD is a standard measure of structural distance between coordinate sets. We can use the rmsd() function to calculate the RMSD between all pairs models.


```{r}
rd <- rmsd(pdbs, fit=T)
```


```{r}
range(rd)
```

Draw a heatmap of these RMSD matrix values

```{r}
#library(pheatmap)

#colnames(rd) <- paste0("m",1:5)
#rownames(rd) <- paste0("m",1:5)
#pheatmap(rd)
```


Plot the pLDDT values across all models. Recall that this information is in the B-factor column of each model and that this is stored in our aligned pdbs object as pdbs$b with a row per structure/model.

```{r}
pdb <- read.pdb("1hsg")
```

```{r}
plotb3(pdbs$b[1,], typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```



## Predicted Alignment Error for domains

Independent of the 3D structure, AlphaFold produces an output called Predicted Aligned Error (PAE). This is detailed in the JSON format result files, one for each model structure.

Below we read these files and see that AlphaFold produces a useful inter-domain prediction for model 1 (and 2) but not for model 5 (or indeed models 3, 4, and 5):

```{r}
library(jsonlite)


pae_files <- list.files(path=pth,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```


For example purposes lets read the 1st and 5th files (you can read the others and make similar plots).

```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```

```{r}
head(pae1$plddt) 
```

```{r}
pae1$max_pae
```

```{r}
pae5$max_pae
```


We can plot the N by N (where N is the number of residues) PAE scores with ggplot or with functions from the Bio3D package:


```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```


```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```


We should really plot all of these using the same z range. Here is the model 1 plot again but this time using the same data range as the plot for model 5:

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```



## Residue conservation from alignment file

```{r}
aln_file <- list.files(path=pth,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```

```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```

How many sequences in this alignment  

```{r}
dim(aln$ali)
```

We can score residue conservation in the alignment with the conserv() function.

```{r}
sim <- conserv(aln)
```


```{r}
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")
```


Note the conserved Active Site residues D25, T26, G27, A28. These positions will stand out if we generate a consensus sequence with a high cutoff value:


```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```


For a final visualization of these functionally important sites we can map this conservation score to the Occupancy column of a PDB file for viewing in molecular viewer programs such as Mol*, PyMol, VMD, chimera etc.

```{r}
m1.pdb <- read.pdb(pdb_files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```









