---
title: "class 14: RNA-Seq Mini Project"
author: "Aigerim (PID: 09919142)"
format: pdf
---


## Data import 


```{r data import}
counts <- read.csv("GSE37704_featurecounts.csv", row.names=1)
metadata <- read.csv("GSE37704_metadata.csv")
```


## Data exploration 

```{r}
head(counts)
```

Check for metadata

```{r}
colnames(counts)
```
```{r}
metadata$id
```
```{r}
countData <- counts[,-1]
```

```{r}
all(colnames(countData)== metadata$id)
```

## Filter out zero count genes

We can sum accross the rows and then remove those with zero sums

```{r}
non.zero.inds <- rowSums(countData) > 0
non.zero.counts <- countData[non.zero.inds,]
```

>How many genes we have with non zero counts?

```{r}
nrow(non.zero.counts)
```
```{r}
head(non.zero.counts)
```

## Setup for DESeq

```{r}
#| message: false

library(DESeq2)
```


## DESeq Analysis



```{r}
head(non.zero.counts)
```


```{r}
dds <- DESeqDataSetFromMatrix(countData = non.zero.counts,
                       colData = metadata,
                       design = ~condition)
```
```{r}
dds <- DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```


## Results extraction and visualization 

```{r}
library(ggplot2)
df <- as.data.frame(res)
```

```{r}
ggplot(df) +
  aes(x = log2FoldChange, y = -log(padj)) +
  geom_point()
```

```{r}
df <- as.data.frame(res)
mycols <- rep("grey", nrow(df))
mycols[abs(res$log2FoldChange) > 2] <- "blue"
mycols[res$padj > 0.05] <- "grey"

ggplot(df) +
  aes(x = log2FoldChange, y = -log(padj)) +
  geom_point(color = mycols)
```


## Pathway Analysis

### Annotation the genes with symbol and entrez id

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```
Let's see the databases that we can translate between:

```{r}
columns(org.Hs.eg.db)
```

We can use these "columns" with the `mapIds()` function to translate between databases identifiers. 

```{r}
res$symbol <- mapIds(org.Hs.eg.db, 
                     keys = row.names(res), 
                     keytype = "ENSEMBL",
                     column = "SYMBOL")

res$entrz <- mapIds(org.Hs.eg.db, 
                     keys = row.names(res), 
                     keytype = "ENSEMBL",
                     column = "ENTREZID")
res$genename <- mapIds(org.Hs.eg.db, 
                     keys = row.names(res), 
                     keytype = "ENSEMBL",
                     column = "GENENAME")
```

```{r}
head(res)
```


```{r}
head(res$entrz)
```

### KEGG and GO analysis

BiocManager::install(c("pathview", "gage", "gageData"))

```{r}
#| message: false
library(gage)
library(gageData)
library(pathview)
```
The gage fucntion and wants as input a vector of, in this case, fold changes with names of genes in the format that matches the databases/geneset we are going to use. 

```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrz
head(foldchanges)
```


```{r}
x <- c(10, 8, 9)
names(x) <- c("emily", "larry", "mark")
names(x)
```

```{r}
library(gage)
library(gageData)
library(pathview)
```


```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)


```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```



```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```


```{r}
pathview(foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)


## Gene Ontology 
 
```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```


```{r}
head(gobpres$less)
```


## Reactome Analysis

We need a list of genes as a text file for using the reactome online site.
Let's start with our genes that have a abs(log2FC) > 2 and an adjusted P-value < 0.05

```{r}
c(T, T, T, F) & c(T, F, T, T)
```

```{r}
inds <- (abs(res$log2FoldChange) > 2) & (res$padj < 0.05)
mygenes <- res$symbol[inds]
```


```{r}
cat(head(mygenes), sep="\n")
```


```{r}
write.table(mygenes, file="mygenes.txt", 
            quote=FALSE, row.names=FALSE)
```

![](R-HSA-68886.png)

## Save my results

```{r}
write.csv(res, file="myresults.csv")
```



