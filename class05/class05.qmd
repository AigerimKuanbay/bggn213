---
title: "Class 5: Data Viz with ggplot"
author: "Aigerim (PID: U09919142)"
format: pdf
date: 01/24/24
---

# Graphics system in R

There are many graphics systems in R. These include so-called *"base R"* and those in add-on packages like `ggplot2`.


```{r}
plot(cars)
```

How can we make this with `ggplot2`

This is an odd-on package and I first need to install it on my computer. This install is a one time only deal.

To install any package I use `install.packages()` function.

To use it we need to load up the package from our library of install packages.For this I use `library(ggplot2)`

```{r}
library(ggplot2)
ggplot(cars)
```
Using ggplot is not as straightforward as base R plot for basic plots. I have some more typing to do.

Every ggplot has at least 3 things (layers):

- data (data.frame)
- aes (how the data map to the plot)
- **geoms** (think of this as the type of plot, eg points, lines, etc)

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point()
```
Here ggplot was more verbose - i.e. I had more typing to do - than base R. However, I can add more layers. 

```{r}
ggplot(cars) + 
  aes(speed, dist) + 
  geom_point() + 
  geom_smooth() + 
  labs(title = "Stopping Distance of Old Cars") + 
  theme_bw()
```

```{r}
pl <- ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point()

pl
```

```{r}
pl + geom_line()
```

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method="lm", se=FALSE)
```


```{r}
library(patchwork)

(pl | pl)/ pl
```

## Lab sheet 

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```
```{r}
head(genes, 2)
```
 > Q. Use the nrow() function to find out how many genes are in this dataset. What is your answer?
 
```{r}
nrow(genes)
```
 > Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?
 
```{r}
ncol(genes)

```

> Q. Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer?

```{r}
table(genes$State)
```

> Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
round(table(genes$State) / nrow(genes) * 100, 2)
```

>Q. Nice, now add some plot annotations to the p object with the labs() function so your plot looks like the following:

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point() +
  scale_colour_manual( values=c("blue","gray","red") ) +
  labs(title = "Gene Expression Changes Upon Drug Treatment", x = "Control", y = "Drug Treatment")
```
```{r}
p2 <- ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point() +
  scale_colour_manual( values=c("blue","gray","red") ) +
  labs(title = "Gene Expression Changes Upon Drug Treatment", x="Control", y="Drug Treatment")
```

And an interactive version with `plotly`

```{r}
#| message: false 
library("plotly")

```

## Create interactive plots 
```{r}
#ggplotly(p2)
```



##Another example:

```{r}
library("gapminder")
```

```{r}
#| message: false 
library(dplyr)
```

```{r}
gapminder_2007 <- gapminder %>% filter(year==2007)
```

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()
```

##One useful approach here is to add an alpha=0.4 argument to your geom_point() call to make the points slightly transparent:

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.8)
```

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, size = pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)
```

```{r}
ggplot(gapminder_1957) + 
  aes(x = gdpPercap, y = lifeExp) +
  geom_point()
```

```{r}
ggplot(gapminder_1957) + 
  aes(x = gdpPercap, y = lifeExp) +
  geom_point(alpha = 0.7)
```

```{r}
ggplot(gapminder_1957) + 
  aes(x = gdpPercap, y = lifeExp, color = continent, size = pop) +
  geom_point(alpha = 0.7)
```

```{r}
ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop), alpha = 0.7) +
  scale_size_area(max_size = 15)
```

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)
```

## Introduction to bar charts

```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5
```

## Simple bar

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop)) 
```

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = lifeExp))
```

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop, fill = continent))
```

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop, fill = lifeExp))
```

```{r}
ggplot(gapminder_top5) + 
  aes(x = country, y = pop, fill = gdpPercap) + 
  geom_col()
```

```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=gdpPercap) +
  geom_col()
```

## Flipping bar charts

```{r}
head(USArrests)
```

```{r}
USArrests$State <- rownames(USArrests)
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_col() +
  coord_flip()
```

```{r}
ggplot(USArrests) + 
  aes(x = reorder(State, Murder), y = Murder) + 
  geom_point() + 
  geom_segment(aes(x = State,
                   xend = State,
                   y = 0,
                   yend = Murder), color = "Blue") + 
  coord_flip()
```

## Combining plots

```{r}
library(patchwork)

p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))

# Use patchwork to combine them here:
(p1 | p2 | p3) /
      p4
```











