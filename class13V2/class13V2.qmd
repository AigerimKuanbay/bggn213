---
title: "class 13"
author: "Aigerim (PID: 09919142)"
format: pdf
---


Today we are working with the data published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).


##Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```


```{r}
head(counts)
```

```{r}
head(metadata)
```

>Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

>Q2. How many total sample?

```{r}
ncol(counts)
```

>Q3. How many ‘control’ cell lines do we have? 

```{r}
table(metadata$dex)
```

```{r}
sum(metadata$dex == "control")
```

Let's make sure our `metadata` matches with `counts`

```{r}
colnames(counts)
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

```{r}
all(c(T,T,T,T))
```

```{r}
all(colnames(counts) == metadata$id)
```
>Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

We have a plan 
- first extract out the control sample
- calculate the row wise means (ie mean counts for eacch gene)

```{r}
#First where are the "control"data
control.inds <- metadata$dex == "control"
control.counts <- counts[, control.inds]
control.mean <- apply(control.counts, 1, mean)
```

Now do the same for the treated samples giving us a `treated.mean`

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean

```{r}
#First where are the "treated"data
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[, treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
```


Store these together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```


>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```

```{r}
head(meancounts)
```

>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)
```


```{r}
ggplot(meancounts, aes(x=meancounts[,1], y=meancounts[,2])) +
  geom_point(alpha=0.5)
```


>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

We have skewed data over a wide range, we care about orders of magnitude. Let's do log transform. 

```{r}
plot(meancounts, log = "xy")
```

WE can look at differences here via a little fraction. Divide one condition by another. EG Treated/control

```{r}
log2(20/20)
```

```{r}
log2(40/20)
```

```{r}
log2(10/20)
```

Log2 fold change for our treated/control

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/
                          meancounts$control.mean)
```


```{r}
head(meancounts)
```

>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

Instead of `which()` and `unique()` we used: 
- `rowSums()` to calculate where both values in columns 1 and 2 are zero.
- A logical vector to identify rows with non-zero sums.
- The original matrix to subset to exclude rows with non-zero sums.


Because of zero genes we have weird results, we have cut them off. 

How can we identify zero count genes in our `meancounts`

```{r}
head(meancounts[,1:2] == 0)
```

```{r}
zero.sums <- rowSums(meancounts[,1:2] == 0)
to.rm.ind <- zero.sums > 0
mycounts <- meancounts[!to.rm.ind,]
head(mycounts)
```

A common threshold for calling something "differential expressed" is a log2 fold-change value of +2 or -2.

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 


```{r}
sum(mycounts$log2fc >= +2)
```

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 


```{r}
sum(mycounts$log2fc <= -2)
```

>Q10. Do you trust these results? Why or why not? How many of our remaining genes are "up regulated".

We've conducted our analysis using fold change, but it's important to note that a large fold change doesn't necessarily mean the difference is statistically significant, especially without considering p-values. We haven't taken steps to assess the significance of the observed differences yet. The current results, without considering statistical significance, may be misleading.



Let's do in correct way

```{r}
#| message: false
library(DESeq2)
```

DESeq2 wants

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design =~dex)
```

The main analysis function is called `DESeq()` and we can now pass it our setup input object with all the data we need.

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the DESeq function `results()`

```{r}
res <- results(dds)
head(res)
```

##Volcano plot

A common visualization for this type of plot is called a volcano plot. It is plot of log fold change against P-value. 
 
```{r}
plot(res$log2FoldChange, res$padj)
```


```{r}
plot(res$log2FoldChange, log(res$padj))
```

Adding "-" makes results upside down

```{r}
plot(res$log2FoldChange, -log(res$padj),
     ylab="-log(p-value)",
     xlab="log2FoldChange")
abline(v=-2, col="red")
abline(v=2, col="red")
abline(h=-log(0.05), col="red")
```


Save our results thus far

```{r}
write.csv(res, file="myresults.csv")
```


##Adding annotation data

Our result table so far only contains the Ensembl gene IDs. 
However, we want to be able to make sense of these genes. Minimally we should add conventional gene symnbol names, but also add identifiers for other databases that we might want to look in later in later for info about these genes. 

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL", 
                     column="SYMBOL",   
                     multiVals="first")
```

```{r}
head(res)
```


We also need to ENTREZ ids so we can "talk to" 

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="ENTREZID",   # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```












